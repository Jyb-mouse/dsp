/*
 * fft_32x32.c
 *
 *  Created on: 2020Äê11ÔÂ16ÈÕ
 *      Author: Jyb_mouse
 */
int data[]={ 215, 1423, 238, 1141, 78, 1169, 181, 1133, 378, 1041, 299, 1166, 147, 1405, 309, 1552, 540, 1286, 678, 1510, 981, 1751, 1186, 1322, 1049, 1322, 1100, 998, 1140, 1272, 1302, 1072, 981, 1072, 969, 1504, 1513, 1221, 1443, 1083, 1697, 1484, 1952, 852, 1230, 629, 1843, 846, 1679, 359, 1553, 629, 1286, 791, 1459, 545, 1459, 301, 1385, 579, 1988, 687, 1845, 115, 1211, -246, 1471, 55, 1488, -537, 1346, -204, 891, -350, 709, -11, 1120, -300, 1228, -446, 1343, -207, 1246, -710, 559, -1070, 579, -831, 1005, -1163, 278, -1235, 246, -673, 110, -931, 122, -1150, 436, -1014 ,717, -1161, 319, -1666, -718, -1598, -177, -1646, -163, -2167, -981, -1763, -733, -1192, -898, -1594, -966, -1725, -764, -2192, -1063, -1994, -1275, -1808, -1630, -2226, -1959, -2140, -1856, -2448, -2276, -2130, -2458, -1381, -2143, -2026, -2881, -1898, -2549, -1956, -2758, -1745, -2733, -1516, -3067, -1847, -3540, -1521, -3188, -1830, -3688, -1046, -3434, -435, -3130, -906, -4013, -875, -3362, -156, -2986, -222, -3086, -85, -3284, 120, -3296, 154, -3122, 325, -2971, 689, -2751, 1243, -2614, 1347, -2516, 1160, -2131, 1839, -1272, 1540, -1773, 1501, -1823, 1930, -1372, 1976, -877, 1927, -815, 2092, -681, 2561, -623, 2355, -557, 2391, 221, 2900, 930, 2213, 187, 2212, 376, 2748, 615, 2288, 1033, 2137, 990, 2318, 1028, 2471, 1066, 2463, 1018, 2189, 1479, 2231, 1935, 2293, 1688, 1921, 1453, 2311, 1780, 1645, 1534, 1484, 1835, 1519, 1584, 1807, 1486, 2029, 1692, 1774, 1835, 1516, 2333, 1305, 1804, 1086, 1643, 1663, 2050, 782, 1265, 583, 1745, 1034, 1632, 1145, 1671, 1077, 1403, 826, 1512, 636, 1913, 538, 1540, 253, 1061, 751, 1502, 317, 819, -160, 1198, 457, 1170, 199, 874, 514, 983, 198, 904, -204, 755, -78, 718, 48, 511, 239, 636, 45, 314, -553, 314, 111, 615, -5, 68, 239, 168, 36, 178, -75, 345, 11, 289, 62, 69, 265, 244, 86, -15, -247, -191, 356, 498, 408, 21, 195, 141, 374, 128, 67, 377, 454, 515, 308, 192, 203, 199, 209, 100, 187, 431, 635, 659, 285, 181, 394, 538, 630, 645, 13, 656, 243, 695, 225, 321, 159, 301, 260, 621, 166, 702, 188, 722, 235, 588, 77, 478, 92, 740, -128, 597, -158, 620, -106, 233, -99, 371, -20, 542, -250, 448, -190, 415, -171, 318, -177, 337, -226, 474, -485, 62, -455, 253, -125, 158, -363, 150, -375, 136, -472, 127, -437, 131, -419, -156, -358, 43, -339, 70, -493, -18, -534, 48, -391, -122, -525, -304, -540, -109, -519, -241, -562, -233, -364, -226, -317, -164, -516, -255, -640, -174, -521, -207, -536, -478, -610, -491, -409, -246, -696, -476, -683, -469, -328, -363, -635, -609, -595, -446, -591, -406, -673, -741, -688, -733, -526, -700, -479, -615, -705, -684, -655, -772, -678, -862, -656, -1018, -551, -846, -452, -925, -557, -744, -562, -1082, -645, -1080, -475, -972, -588, -1171, -649, -1210, -416, -1147, -216, -1205, -508, -1269, -192, -983, -381, -1132, -417, -1416, -302, -1162, -56, -1144, -463, -1485, -233, -1290, 151, -1243, -54, -1324, -134, -1310, 197, -865, -57, -1484, 74, -1106, 193, -1273, 63, -1288, 130, -1271, 384};
int f[]={0,32767,-6392,32137,-12539,30272,-18204,27244,-23169,23169,-27244,18204,-30272,12539,-32137,6392,-32767,0,-32137,-6392,-30272,-12539,-27244,-18204,-23169,-23169,-18204,-27244,-12539,-30272,-6392,-32137,0,-32766,6392,-32137,12539,-30272,18204,-27244,23169,-23169,27244,-18204,30272,-12539,32137,-6392,32766,0,32137,6392,30272,12539,27244,18204,23169,23169,18204,27244,12539,30272,6392,32137};
void bit_reverse(int n, int* x) // Bitreversal operation
           // n : squence length
           // x : input/output sequence
{
	 int temp;
	 for (int i = 0, j = 1; j < n - 1; j++) {
		  for (int k = n >> 1; k >(i ^= k); k >>= 1);
		  if (i < j){
		   temp = x[2*i];
		   x[2*i] = x[2*j];
		   x[2*j] = temp;
		   temp = x[2*i+1];
		   x[2*i+1]=x[2*j+1];
		   x[2*j+1]=temp;
		  }
	 }
}
void fft_32x32a(int *x, int *w, int nx){
	int n1,n2,ie,ia,i,j,k,l,m;
	int xt,yt,c,s;
	n2 = nx;
	ie = 1;
	for (k=nx; k > 1;  k = (k >> 1)) {
		n1 = n2;
		n2 = n2>>1;
//		if(n2>=64){
//			for (j=0; j < nx; j+=n1) {
//				ia = 0;
//				int time;
//				time = n2/32;
//				for (i=0; i < time; i += 1) {
//					m = i*32+j;
//					l = m + n2;
//					fft_32x32_asm(&x[2*m],&x[2*l],&w[2*ia]);
//					ia = ia + 32;
//				}
//			}
//		}
//		else{
			for (j=0; j < nx; j+=n1) {
				ia = 0;
				for (i=0; i < n2; i += 1) {
					c = w[2*ia];		//imag
					s = w[2*ia+1];			//real
					ia = ia + 1;
					m = i+j;
					l = m + n2;
					xt = x[2*m] - x[2*l];		//imag
					x[2*m] = x[2*m] + x[2*l];		//imag
					yt = x[2*m+1] - x[2*l+1];		//real
					x[2*m+1] = x[2*m+1] + x[2*l+1];		//real
					x[2*l] = (c*yt + s*xt)>>16;		//imag
					x[2*l+1] = (s*yt - c*xt)>>16;		//real
				}
			}
//		}
	  for(int p = 0; p < n2; p+=2){
	   w[p]=w[2*p];
	   w[p+1]=w[2*p+1];
	  }

	  for(int j = 0; j < 512; j++ ){
	  				data[j] >>= 1;
	  			}
	}
	bit_reverse(nx,x);
}

int main(){
	int ndata = 256;
	set_vpsel(4);
	fft_32x32(data,f,ndata);

	return 0;
}
