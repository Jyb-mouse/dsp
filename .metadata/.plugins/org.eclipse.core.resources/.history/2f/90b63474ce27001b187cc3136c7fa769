extern void dsp_maxval_asm(short *data, short *temp);

short DSP_maxval(short x[], int nx) {
	int max;
	max = -32768;
	short temp[128] = { -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			-32768 };
	int k = nx / 128;
	if (nx >= 256) {
		for (int i = 0; i < k; i++) {
			dsp_maxval_asm(&x[i * 128], temp);
		}
		for (int i = 0; i < 128; i++)
			if (temp[i] > max)
				max = temp[i];
	} else if (nx >= 128) {
		k--;
	}
	for (int i = k * 128; i < nx; i++)
		if (x[i] > max)
			max = x[i];
	return max;
}

